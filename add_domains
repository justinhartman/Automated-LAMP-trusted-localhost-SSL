#!/bin/bash
#
# Fully automated LAMP installation and configuration using Trusted localhost SSL Certificates
# 
# Copyright: Copyright (C) 2018 Justin Hartman <justin@hartman.me> (https://justin.hartman.me)
# Author   : Justin Hartman <justin@hartman.me> (https://justin.hartman.me)
# License  : https://opensource.org/licenses/AGPL-3.0 AGPL-3.0
# Version  : 1.0.0
# Link     : https://github.com/22digital/Automated-LAMP-trusted-localhost-SSL
# Link     : https://justin.hartman.me
# Since    : 1.0.0
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# 

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
colour_palette ()
{
    # Some colours to mess around with
    BLK='\033[0;30m' # Black
    GRY='\033[1;30m' # Dark Gray
    RED='\033[0;31m' # Red
    ORG='\033[1;31m' # Light Red (Orange)
    GRN='\033[0;32m' # Green
    BRO='\033[0;33m' # Brown/Orange
    BLU='\033[0;34m' # Blue
    PUR='\033[0;35m' # Purple
    LPU='\033[1;35m' # Light Purple
    CYA='\033[0;36m' # Cyan
    LGY='\033[0;37m' # Light Gray
    WHT='\033[1;37m' # White
    NOC='\033[0m' # No Color
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
enter_domain ()
{
    echo "Enter the domain name to be added " >&2
    read -p "(NB: do not include http:// or https://): " domain
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
openssl_config ()
{
    read serial <<< $(wc -l < 'ssl/openssl.conf' | tr -d ' ')
    serial=$((serial-11))
    echo "DNS.${serial}      =   ${domain}" >> 'ssl/openssl.conf' >&2
    cat ssl/openssl.conf | grep "DNS"
    printf "\n${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully added the ${domain}
    domain name to the openssl configuration file.${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
openssl_command ()
{
    openssl req -new \
        -key ssl/localhost_server.key \
        -out ssl/localhost_server.csr \
-subj "/C=ZA/ST=Western Cape/L=Cape Town/O=22 Digital/OU=Security/CN=localhost"

    openssl x509 -req \
        -in ssl/localhost_server.csr \
        -CA ssl/localhost_rootCA.crt \
        -CAkey ssl/localhost_rootCA.key \
        -CAcreateserial \
        -out ssl/localhost_server.crt \
        -days 9125 \
        -sha256 \
        -extfile "ssl/openssl.conf"

    ls -lh ssl/localhost_server.c*

    printf "\n${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully created SSL
    certificates for ${domain}.${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
hosts_file_backup ()
{
    cp /etc/hosts hosts/hosts.original
    printf "${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully backed up hosts file.
    ${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
hosts_symbolic ()
{
    ln -s /etc/hosts hosts/hosts
    ls -lh hosts/hosts
    printf "\n${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully created symbolic link
    from '/etc/hosts' to 'hosts/hosts'.${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
hosts_domain ()
{
    echo "127.0.0.1       ${domain}" >> /etc/hosts
    cat /etc/hosts | grep "${domain}"
    printf "\n${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully added ${domain} to
    /etc/hosts file.${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
folder_and_git ()
{
    mkdir -p /Volumes/Storage/Personal/Code/Github/${domain}
    cd /Volumes/Storage/Personal/Code/Github/${domain}
    username=$(whoami) && chown -R $username:admin ../${domain}
    git init
    touch .gitignore
    echo ".git/" > .gitignore
    ls -lha ../${domain}
    printf "\n${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully created folder, set
    permissions and initialised git repo for ${domain}.${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
git_setup ()
{
    cd /Volumes/Storage/Personal/Code/Github/${domain}
    touch README.md
    echo "# ${domain} README file" > README.md
    echo "" >> README.md
    echo "This is the official git repository for ${domain}." >> README.md
    echo "" >> README.md
    echo "## License" >> README.md
    echo "" >> README.md
    echo "${domain} is licensed under the GNU Affero General Public License
    Version 3, 19 November 2007." >> README.md
    echo "[Click here](LICENSE.md) to read the full copy of this license or
    [visit here](https://www.gnu.org/licenses/)." >> README.md
    echo "" >> README.md
    cat /Volumes/Storage/Personal/Code/Github/localhost-configuration/git/LICENSE_INCLUDE >> README.md
    cp /Volumes/Storage/Personal/Code/Github/localhost-configuration/git/LICENSE LICENSE
    ls -lha ../${domain}
    git add -A
    git commit -m "Initial structure, README.md, LICENSE and check-in."
    printf "\n${GRN}\xE2\x9C\x94${NOC} ${CYA}Successfully created files and
    committed changes.${NOC}\n"
}

#######################################
# Description
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
run_function ()
{
    colour_palette # add the colour palette

    echo -e "${RED} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  The Aston Martin of perfect LAMP setups     |" >&2
    echo "|  and configuration; automating the entire    |" >&2
    echo "|  process and managing your localhost SSL     |" >&2
    echo "|  using trusted self-signed CA certificates.  |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    enter_domain # get domain name to be added

    echo "" >&2
    echo -e "${ORG} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  Add domain to 'openssl.conf' configuration  |" >&2
    echo "|  file.                                       |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    openssl_config

    echo "" >&2
    echo -e "${GRN} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  Create SSL Certificates for the new domain. |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    openssl_command

    echo "" >&2
    echo -e "${BRO} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  Backup original hosts file '/etc/hosts'     |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    hosts_file_backup

    echo "" >&2
    echo -e "${GRY} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  Create symbolic link for 'hosts/hosts' to   |" >&2
    echo "|  point to '/etc/hosts' file.                 |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    hosts_symbolic

    echo "" >&2
    echo -e "${WHT} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  Add new domain to hosts file                |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    hosts_domain

    echo "" >&2
    echo -e "${BLU} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  Add website folder and initialise git repo  |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    folder_and_git

    echo "" >&2
    echo -e "${PUR} ----------------------------------------------" >&2
    echo "|                                              |" >&2
    echo "|  git initial structure, files and check-in   |" >&2
    echo "|                                              |" >&2
    echo -e " ---------------------------------------------- ${NOC}\n" >&2
    git_setup
    echo "" >&2
}

if ! [ $(id -u) = 0 ]; then
    echo "" >&2
    echo "This needs to be run as root." >&2
    echo "Please run it again using sudo." >&2
    echo "e.g. $ sudo ./add_domains.sh" >&2
    echo "" >&2
    exit 1
fi

run_function
exit 0
